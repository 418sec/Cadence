diff -U 3 -H -d -r -N -- lilv-0.14.2.old/lilv/lilv.h lilv-0.14.2/lilv/lilv.h
--- lilv-0.14.2.old/lilv/lilv.h	2012-05-31 00:01:08.000000000 +0100
+++ lilv-0.14.2/lilv/lilv.h	2012-04-29 20:48:18.000000000 +0100
@@ -1693,6 +1693,25 @@
 lilv_ui_get_binary_uri(const LilvUI* ui);
 
 /**
+  Custom calls
+*/
+LILV_API
+LilvNodes*
+lilv_ui_get_supported_features(const LilvUI* ui);
+
+LILV_API
+LilvNodes*
+lilv_ui_get_required_features(const LilvUI* ui);
+
+LILV_API
+LilvNodes*
+lilv_ui_get_optional_features(const LilvUI* ui);
+
+LILV_API
+LilvNodes*
+lilv_ui_get_extension_data(const LilvUI* ui);
+
+/**
    @}
    @}
 */
diff -U 3 -H -d -r -N -- lilv-0.14.2.old/src/ui.c lilv-0.14.2/src/ui.c
--- lilv-0.14.2.old/src/ui.c	2012-03-27 04:41:41.000000000 +0100
+++ lilv-0.14.2/src/ui.c	2012-04-29 20:58:07.000000000 +0100
@@ -128,3 +128,57 @@
 	assert(ui->binary_uri);
 	return ui->binary_uri;
 }
+
+static LilvNodes*
+lilv_ui_get_value_internal(const LilvUI* ui,
+                           const SordNode*   predicate)
+{
+    return lilv_world_query_values_internal(
+        ui->world, ui->uri->val.uri_val, predicate, NULL);
+}
+
+LILV_API
+LilvNodes*
+lilv_ui_get_supported_features(const LilvUI* ui)
+{
+    LilvNodes* optional = lilv_ui_get_optional_features(ui);
+    LilvNodes* required = lilv_ui_get_required_features(ui);
+    LilvNodes* result   = lilv_nodes_new();
+
+    LILV_FOREACH(nodes, i, optional)
+        zix_tree_insert((ZixTree*)result,
+                        lilv_node_duplicate(lilv_nodes_get(optional, i)),
+                        NULL);
+    LILV_FOREACH(nodes, i, required)
+        zix_tree_insert((ZixTree*)result,
+                        lilv_node_duplicate(lilv_nodes_get(required, i)),
+                        NULL);
+
+    lilv_nodes_free(optional);
+    lilv_nodes_free(required);
+
+    return result;
+}
+
+LILV_API
+LilvNodes*
+lilv_ui_get_required_features(const LilvUI* ui)
+{
+    return lilv_ui_get_value_internal(
+        ui, ui->world->uris.lv2_requiredFeature);
+}
+
+LILV_API
+LilvNodes*
+lilv_ui_get_optional_features(const LilvUI* ui)
+{
+    return lilv_ui_get_value_internal(
+        ui, ui->world->uris.lv2_optionalFeature);
+}
+
+LILV_API
+LilvNodes*
+lilv_ui_get_extension_data(const LilvUI* ui)
+{
+    return lilv_ui_get_value_internal(ui, ui->world->uris.lv2_extensionData);
+}
